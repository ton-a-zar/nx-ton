import BN from 'bn.js';

import { Cell } from 'ton';
import { SmartContract } from 'ton-contract-executor';
import { internalMessage, randomAddress } from './helpers';

import * as main from '../src/main';
import { SuccessfulExecutionResult } from 'ton-contract-executor/dist/smartContract/SmartContract';
import { hex } from '../build/main.compiled.json';

describe('Counter tests', () => {
  let contract: SmartContract;

  beforeEach(async () => {
    contract = await SmartContract.fromCell(
      Cell.fromBoc(hex)[0], // code cell from build output
      main.data({
        ownerAddress: randomAddress('owner'),
        counter: 17,
      })
    );
  });

  it('should get the meaning of life', async () => {
    const call = await contract.invokeGetMethod('meaning_of_life', []);
    expect((call.result[0] as BN).eq(new BN(42))).toBeTruthy();
  });

  it('should get counter value and increment it', async () => {
    const call = (await contract.invokeGetMethod(
      'counter',
      []
    )) as SuccessfulExecutionResult;
    expect((call.result[0] as BN).eq(new BN(17))).toBeTruthy();

    const send = await contract.sendInternalMessage(
      internalMessage({
        from: randomAddress('notowner'),
        body: main.increment(),
      })
    );
    expect(send.type).toBe('success');

    const call2 = await contract.invokeGetMethod('counter', []);
    expect((call2.result[0] as BN).eq(new BN(18))).toBeTruthy();
  });
});
